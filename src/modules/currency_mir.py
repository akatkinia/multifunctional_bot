from datetime import datetime
import io
import ssl
import requests
import urllib.request

from bs4 import BeautifulSoup as bs
import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import pdfplumber


# URL = "https://mironline.ru/upload/currency%20rate/FX_rate_Mir.pdf"
# FILE_PATH = "MIR.pdf"
# COMBINED_TABLE = []
URL = "https://privetmir.ru/upload/FX_rate_Mir/FX_rate_Mir.pdf"


def get_currencies_mir():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    req = urllib.request.Request(URL, method="GET")
    req.add_header("User-Agent", "Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0")
    opener = urllib.request.build_opener(urllib.request.HTTPSHandler(context=ssl._create_unverified_context()))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
    response = opener.open(req)
    file_bytes = response.read()

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–π—Ç–æ–≤
    pdf_file_obj = io.BytesIO(file_bytes)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É
    target_table_index = 1  # –ò–Ω–¥–µ–∫—Å –∏—Å–∫–æ–º–æ–π —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –æ–Ω–∞ –≤—Ç–æ—Ä–∞—è, –∏–Ω–¥–µ–∫—Å –±—É–¥–µ—Ç 1)
    combined_table = []

    with pdfplumber.open(pdf_file_obj) as pdf:
        for page_number, page in enumerate(pdf.pages, start=1):
            tables = page.extract_tables()

            if len(tables) > target_table_index:
                # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                target_table = tables[target_table_index]
                combined_table.extend(target_table)

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–π—Ç–æ–≤
    pdf_file_obj = io.BytesIO(file_bytes)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É
    combined_table = []
    with pdfplumber.open(pdf_file_obj) as pdf:
        for page in pdf.pages:
            tables = page.extract_tables()
            if tables:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                for table in tables:
                    combined_table.extend(table)


    # –ò—Å–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    processed_table = [row for row in combined_table if "–í–∞–ª—é—Ç–∞ –ö—É—Ä—Å –í—Ä–µ–º—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –î–∞—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è" not in row]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–ª–æ–≤–∞—Ä—å
    formatted_data = []
    for row in processed_table:
        row_data = row[0].split(" ")
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤ —Å–ø–∏—Å–∫–µ row_data –±—ã–ª–æ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if len(row_data) == 5:
            valute = ' '.join(row_data[:2])
            currency = row_data[-3]
            time = row_data[-2]
            date = row_data[-1]
            data = {
                "Valute": valute,
                "Currency": currency,
                "Date": date,
                "Time": time
            }
            formatted_data.append(data)
    return formatted_data


def get_valutes_mir(main):
    url = "https://mironline.ru/support/list/kursy_mir/"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0"
    }
    soup = bs(requests.get(url=url, headers=headers).content, "lxml")
    valutes = []

    rows = soup.find("table").find_all("tr")
    print(rows)
    for row in rows:
        valute_elem = row.find("p")
        if valute_elem and valute_elem.text.strip() != "–í–∞–ª—é—Ç–∞":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –Ω–µ "–í–∞–ª—é—Ç–∞"
            valute = valute_elem.text.strip()
            valutes.append(valute)

    valutes_text = '\n'.join(valutes)

    first_date = main[0]["Date"]
    last_date = main[-1]["Date"]

    result = f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n{valutes_text}\n\n<b>–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ:</b>\n{last_date} - {first_date}"

    return result


def get_course_today_mir(main, valute):
    valute = valute.capitalize()
    results = []

    for index, data in enumerate(main):
        current_date = main[index]["Date"] if index < len(main) else None
        if valute == data["Valute"] and current_date == data["Date"]:
            currency = float(data["Currency"].replace(",", "."))
            time = data["Time"]
            result = f"""<b>üí∞ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫—É—Ä—Å —Ä–∞–≤–µ–Ω –∫—É—Ä—Å—É –∑–∞ {current_date} {time}</b>

RUB –∫ {valute}: {round(1/currency, 4)}
{valute} –∫ RUB: {currency}
"""
            results.append(result)
            break

    if results:
        return "\n".join(results)
    else:
        return "–ù–µ–∫–æ—Ä—Ä–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –≤–∞–ª—é—Ç–∞. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø—Ä–∞–≤–∫–æ–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"


def get_course_on_date_mir(main, valute, date):
    valute = valute.capitalize()
    date = date

    results = []

    for data in main:
        if valute == data["Valute"] and date == data["Date"]:
            currency = float(data["Currency"].replace(",", "."))
            time = data["Time"]
            result = f"""<b>üí∞ –ö—É—Ä—Å –∑–∞ {date} {time}</b>

RUB –∫ {valute}: {round(1/currency, 4)}
{valute} –∫ RUB: {currency}
"""
            results.append(result)

    if results:
        return "\n".join(results)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    else:
        return f"–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ –≤–∞–ª—é—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ —Å–ø—Ä–∞–≤–∫–µ. –ï—Å–ª–∏ –∂–µ –≤–∞–ª—é—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∫—É—Ä—Å –Ω–µ –º–µ–Ω—è–ª—Å—è"


def draw_currency_chart_mir(main, valute, start_date, end_date):
    try:
        start_date = datetime.strptime(start_date, "%d.%m.%Y")
        end_date = datetime.strptime(end_date, "%d.%m.%Y")

        dates = []
        rates = []
        rates_rub = []

        for data in main:
            date_str = data["Date"] + " " + data["Time"]  # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            date = datetime.strptime(date_str, "%d.%m.%Y %H:%M")  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
            if valute == data["Valute"] and start_date <= date <= end_date:
                dates.append(date)
                currency = float(data["Currency"].replace(",", "."))
                currency_rub = 1 / float(data["Currency"].replace(",", "."))

                rates.append(currency)
                rates_rub.append(currency_rub)

        if len(dates) > 0:
            fig1, ax1 = plt.subplots()
            plt.plot(list(reversed(dates)), list(reversed(rates_rub)), marker='o')
            plt.xlabel("–î–∞—Ç–∞")
            plt.ylabel(valute)
            plt.title(f"–ö—É—Ä—Å —Ä—É–±–ª—è –∫ {valute}")
            plt.xticks(rotation=45)
            plt.grid(True)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —à–∫–∞–ª–µ x
            date_formatter = mdates.DateFormatter("%d.%m.%Y")
            ax1.xaxis.set_major_formatter(date_formatter)

            for i in range(len(dates)):
                value = round(rates_rub[i], 4)
                ax1.annotate(str(value), xy=(dates[i], rates_rub[i]), xytext=(0, 5), textcoords='offset points')

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            plt.tight_layout()

            bytes_io1 = io.BytesIO()
            plt.savefig(bytes_io1, format='png', dpi=300)
            bytes_io1.seek(0)
            fig1_bytes = bytes_io1.getvalue()

            plt.close(fig1)

            fig2, ax2 = plt.subplots()
            plt.plot(list(reversed(dates)), list(reversed(rates)), marker='o')
            plt.xlabel("–î–∞—Ç–∞")
            plt.ylabel("–†—É–±–ª–µ–π")
            plt.title(f"–ö—É—Ä—Å {valute} –∫ —Ä—É–±–ª—é")
            plt.xticks(rotation=45)
            plt.grid(True)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —à–∫–∞–ª–µ x
            ax2.xaxis.set_major_formatter(date_formatter)

            for i in range(len(dates)):
                value = round(rates[i], 4)
                ax2.annotate(str(value), xy=(dates[i], rates[i]), xytext=(0, 5), textcoords='offset points')

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            plt.tight_layout()

            bytes_io2 = io.BytesIO()
            plt.savefig(bytes_io2, format='png', dpi=300)
            bytes_io2.seek(0)
            fig2_bytes = bytes_io2.getvalue()

            plt.close(fig2)

            return fig1_bytes, fig2_bytes
        else:
            return None, None
    except Exception as ex:
        return ex


# if __name__ == "__main__":
    # # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º –∏ –ø–æ –≤—Å–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    # full_currencies = get_currencies_mir()
    
    # # –°–ø—Ä–∞–≤–∫–∞ - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç –∏ –¥–∞—Ç
    # all_valutes = get_valutes_mir(main=full_currencies)
    
    # # –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    # today_course = get_course_today_mir(main=full_currencies, valute="–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ")

    # # –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–ª—é—Ç–µ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–∞—Ç—É
    # course = get_course_on_date_mir(main=full_currencies, valute="–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ", date="20.06.2023")

    # # –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (2 –≥—Ä–∞—Ñ–∏–∫–∞ –≤ PNG, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º –≤ –±–∞–π—Ç–æ–≤–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ - —Ä—É–±–ª—å –∫ –≤–∞–ª—é—Ç–µ –∏ –≤–∞–ª—é—Ç–∞ –∫ —Ä—É–±–ª—é)
    # charts = draw_currency_chart_mir(main=full_currencies, valute="–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ", start_date="01.01.2022", end_date="05.07.2023")